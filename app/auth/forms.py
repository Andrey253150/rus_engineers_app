"""
Модуль форм для аутентификации пользователей.

Этот модуль содержит формы, связанные с аутентификацией пользователей, включая
формы для регистрации и входа в систему. Каждая форма использует Flask-WTF для
обработки валидации данных и обеспечения безопасности, а также включает
соответствующие поля и валидаторы для проверки введенной информации.

Формы:
    - LoginForm (FlaskForm): Форма для входа пользователя в систему.
    - RegistrationForm (FlaskForm): Форма для регистрации нового пользователя.

Валидация:
    Формы включают методы для проверки уникальности email и имени пользователя,
    а также для обеспечения совпадения паролей при регистрации.
"""
from flask_wtf import FlaskForm
from wtforms import (BooleanField, PasswordField, StringField, SubmitField,
                     ValidationError)
from wtforms.validators import DataRequired, Email, EqualTo, Length, Regexp

from ..models import User


class LoginForm(FlaskForm):
    """
    Форма для входа пользователя.

    Эта форма используется для сбора данных о пользователе при входе в систему.
    Включает поля для ввода email, пароля и параметра "Оставить меня в системе".

    Атрибуты:
        - email (StringField): Поле для ввода адреса электронной почты пользователя.
            Включает валидаторы для проверки обязательности, длины и корректности email.
        - password (PasswordField): Поле для ввода пароля пользователя.
            Включает валидатор для проверки обязательности.
        - remember_me (BooleanField): Поле для выбора, сохранять ли пользователя в системе.
        - submit (SubmitField): Кнопка для отправки формы.

    Валидаторы:
        - DataRequired: Проверяет, что поле не пустое.
        - Length: Проверяет длину введенного значения.
        - Email: Проверяет корректность email адреса.
    """
    email = StringField('Email', validators=[DataRequired(), Length(1, 64), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    remember_me = BooleanField('Оставить меня в системе')
    submit = SubmitField('Log In')


class RegistrationForm(FlaskForm):
    """
    Форма регистрации пользователя.

    Эта форма используется для сбора данных о пользователе при регистрации.
    Включает поля для ввода email, имени пользователя, пароля и подтверждения пароля.

    Атрибуты:
        - email (StringField): Поле для ввода адреса электронной почты пользователя.
            Включает валидаторы для проверки обязательности, длины и корректности email.
        - username (StringField): Поле для ввода имени пользователя.
            Включает валидаторы для проверки обязательности, длины и корректности имени.
            Имя пользователя должно начинаться с буквы и содержать только буквы, цифры, точки
            и нижние подчеркивания.
        - password (PasswordField): Поле для ввода пароля пользователя.
            Включает валидатор для проверки обязательности и согласования с полем подтверждения пароля.
        - password2 (PasswordField): Поле для повторного ввода пароля для подтверждения.
            Включает валидатор для проверки обязательности.
        - submit (SubmitField): Кнопка для отправки формы.

    Валидаторы:
        - DataRequired: Проверяет, что поле не пустое.
        - Length: Проверяет длину введенного значения.
        - Email: Проверяет корректность email адреса.
        - Regexp: Проверяет, что имя пользователя соответствует регулярному выражению.
        - EqualTo: Проверяет, что пароли совпадают.
    """
    email = StringField('Email', validators=[DataRequired(), Length(1, 64), Email()])
    username = StringField(
        'Username',
        validators=[
            DataRequired(),
            Length(1, 64),
            Regexp(
                '^[A-Za-z][A-Za-z0-9_.]*$',
                0,
                'Только буквы, цифры, точки и нижние подчеркивания. Без хуйни!'
            )
        ]
    )

    password = PasswordField('Password',
                             validators=[DataRequired(),
                                         EqualTo('password2', message='Пароли должны совпадать.')])
    password2 = PasswordField('Подтвердите введеный пароль', validators=[DataRequired()])
    submit = SubmitField('Register')

    def validate_email(self, field):
        """
        Кастомный валидатор email.
        Все кастомные валидаторы вызываются автоматически вместе со встроенными валидаторами.
        Проверяет, существует ли уже пользователь с данным email.

        Эта функция используется для проверки уникальности адреса электронной почты. 
        Если в базе данных уже существует пользователь с таким email, возбуждается ошибка валидации.

        Аргументы:
            - field (StringField): Поле формы, содержащее значение email, которое проверяется.
              Параметр field автоматически подставляется из имени метода.

        Исключения:
            - ValidationError: Возникает, если email уже зарегистрирован в базе данных.

        Примечания:
            Функция используется в рамках формы регистрации или обновления данных пользователя,
            чтобы предотвратить дублирование адресов электронной почты.
        """
        if User.query.filter_by(email=field.data).first():
            raise ValidationError('Данный email уже зарегистрирован.')

    def validate_username(self, field):
        """
        Кастомная валидация username.
        Проверяет, существует ли уже пользователь с данным именем пользователя.

        Эта функция используется для проверки уникальности имени пользователя.
        Если в базе данных уже существует пользователь с таким именем, возбуждается ошибка валидации.

        Аргументы:
            - field (StringField): Поле формы, содержащее значение имени пользователя, которое проверяется.
                Значение поля `field.data` передается в запрос для проверки, существует ли уже пользователь
                с таким именем.
                В контексте формы регистрации или изменения данных пользователя, `field.data` содержит
                значение, введенное пользователем в поле имени пользователя.
                Этот аргумент автоматически подставляется из имени метода.

        Исключения:
            - ValidationError: Возникает, если имя пользователя уже существует в базе данных.

        Примечания:
            Функция используется в рамках формы регистрации или обновления данных пользователя,
            чтобы предотвратить дублирование имен пользователей.
        """
        if User.query.filter_by(username=field.data).first():
            raise ValidationError('Имя пользователя уже занято.')

    # # Отключена для отиладки.
    # # Валидация password.
    # def validate_password(self, field):
    #     password = field.data

    #     if len(password) < 8:
    #         raise ValidationError('Пароль должен содержать не менее 8 символов.')
    #     if not any(char.isdigit() for char in password):
    #         raise ValidationError('Пароль должен содержать хотя бы одну цифру.')
    #     if not any(char.isupper() for char in password):
    #         raise ValidationError('Пароль должен содержать хотя бы одну заглавную букву.')
    #     if not any(char.islower() for char in password):
    #         raise ValidationError('Пароль должен содержать хотя бы одну строчную букву.')
