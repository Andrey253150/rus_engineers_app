from urllib.parse import urlparse

from flask import (current_app, flash, redirect, render_template, request,
                   url_for)
from flask_login import current_user, login_required, login_user, logout_user
from sqlalchemy import select

from .. import db
from ..email import create_and_send_email_async
from ..models import User
from . import auth_bp
from .forms import LoginForm, RegistrationForm


@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    """
    Обрабатывает процесс аутентификации пользователя (вход в систему).

    Эта функция проверяет, если пользователь уже аутентифицирован, он будет перенаправлен на главную страницу.
    Если нет, она обрабатывает отправку формы входа, проверяет введенные данные и выполняет аутентификацию.
    В случае успешного входа пользователя перенаправляет на страницу, на которую он пытался попасть до входа,
    либо на главную страницу по умолчанию.

    В процессе входа:
        - Проверяется, введен ли правильный email и пароль.
        - Логируются неудачные попытки входа.
        - В случае успешной аутентификации пользователь автоматически входит в систему с помощью Flask-Login.
        - Также выполняется проверка безопасности URL, на который пытался попасть пользователь, чтобы избежать
          атак с открытым перенаправлением.

    Возвращает:
        - redirect: Перенаправление на главную страницу или страницу, на которую пользователь пытался попасть,
          после успешного входа.
        - render_template: Если форма входа не была отправлена или данные некорректны,
          рендерится страница входа.

    Аргументы:
        - None

    Исключения:
        - В случае неудачной попытки входа или неправильных данных, пользователю показывается сообщение
          об ошибке.

    Примечания:
        Для предотвращения атак с открытым перенаправлением проверяется, что URL в параметре 'next' является
        относительным и не содержит домена.
    """

    # Если пользователь уже аутентифицирован, перенаправляем его на главную страницу
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))

    form = LoginForm()
    if form.validate_on_submit():
        user = db.session.scalar(select(User).where(User.email == form.email.data))

        # Проверка пользователя и пароля
        if user is None or not user.verify_password(form.password.data):
            current_app.logger.warning(f'Неудачная попытка входа для email: {form.email.data}')
            flash('Неверный емэйл или пароль, дядь. Ебани еще разок!', 'error')
            return redirect(url_for('.login'))

        # Вход пользователя
        login_user(user, remember=form.remember_me.data)
        current_app.logger.info(f'Пользователь {user.email} успешно вошёл в систему.')

        # Проверка безопасности URL, запрошенного до входа, на то,
        # что от является относительным без домена. Это предотвращает
        # атаки с открытым перенаправлением.
        next_page = request.args.get('next')
        if next_page:
            next_url = urlparse(next_page)
            if next_url.netloc != '':  # Проверка содержания домена в URL
                return redirect(url_for('main.index'))
            return redirect(next_page)

        return redirect(url_for('main.index'))

    return render_template('auth/login.html', form=form)


@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    """
    Обрабатывает регистрацию нового пользователя.

    Эта функция предоставляет форму для регистрации нового пользователя. При отправке формы
    происходит проверка данных и создание нового пользователя в базе данных. После этого
    пользователю отправляется письмо с подтверждением регистрации.

    Структура работы:
        1. Проверка валидности формы:
            - Если форма валидна (пользователь правильно заполнил все поля):
                - Создается новый объект пользователя с введенными данными.
                - Новый пользователь добавляется в базу данных.
                - Генерируется токен для подтверждения аккаунта.
                - Отправляется письмо с подтверждением на указанный email.
                - Отображается сообщение об успешной отправке письма с подтверждением.
                - Перенаправление на главную страницу.

        2. Если форма не отправлена или данные невалидны:
            - Рендерится страница с формой регистрации.

    Аргументы:
        None

    Возвращает:
        - redirect: Если регистрация прошла успешно, происходит редирект на главную страницу.
        - render_template: Если форма не была отправлена или данные невалидны,
          рендерится страница регистрации.

    Исключения:
        Нет явных исключений. В случае ошибок с базой данных или отправкой email они могут быть
        обработаны в других частях приложения (например, в `create_and_send_email_async`).

    Примечания:
        Важно, чтобы пользователь подтвердил свой email для завершения регистрации.
        Для этого отправляется письмо с подтверждением на указанный адрес.
    """
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User(
            email=form.email.data,
            username=form.username.data,
            password=form.password.data
        )
        db.session.add(user)
        db.session.commit()
        token = user.generate_confirmation_token()
        create_and_send_email_async(
            user.email,
            'Подтверждение аккаунта.',
            'auth/email/confirm',
            user=user,
            token=token)
        flash('Письмо с подтверждением отправлено на почту, сэр!')
        return redirect(url_for('main.index'))
    return render_template('auth/register.html', form=form)


@auth_bp.route('/confirm/<token>')
@login_required
def confirm(token):
    """
    Подтверждение почтового ящика пользователя.

    Эта функция обрабатывает процесс подтверждения email пользователя по токену, который был отправлен на почту 
    при регистрации. Пользователь может подтвердить свой email, перейдя по ссылке, содержащей токен.
    Если пользователь уже подтвердил свой email, он получает уведомление, что это уже сделано.

    Структура работы:
        1. Проверка, подтвержден ли уже email пользователя:
            - Если email уже подтвержден, пользователю показывается сообщение об этом.
            - Если email еще не подтвержден:
                - Пытаемся подтвердить email с использованием токена.
                - Если токен действителен, показывается сообщение об успешном подтверждении.
                - Если токен недействителен (старый или битый), пользователю отображается ошибка.

    Аргументы:
        - token (str): Токен подтверждения email, который передается в URL
          и используется для подтверждения почтового ящика. Значение token берется из эндпоинта.
          А эндпоинт был выслан в почту до этого на этапе регистрации.

    Возвращает:
        - redirect: После обработки подтверждения пользователя перенаправляет на главную страницу.

    Исключения:
        Нет явных исключений. В случае ошибки при подтверждении токена или недействительного токена,
        пользователю будет показано сообщение об ошибке.

    Примечания:
        Токен отправляется пользователю на email во время регистрации, и он должен быть использован
        в определенный срок для подтверждения почты.
    """
    if current_user.confirmed:
        flash('Ты уже подтвердил свой email до этого, боец. Вольно!')
        return redirect(url_for('main.index'))
    if current_user.confirm(token):
        flash('Почтовый ящик подтвержден, теперь ты в круге доверия!')
    else:
        flash('Со ссылкой что-то не то: или старая, или битая. Я хз.')
    return redirect(url_for('main.index'))


@auth_bp.route('/unconfirmed')
def unconfirmed():
    """
    Страница для пользователей, которые не подтвердили свой email.

    Эта функция отображает страницу с уведомлением о том, что пользователь еще не подтвердил свой email.
    Если пользователь уже аутентифицирован и его email подтвержден, происходит перенаправление
    на главную страницу.

    Структура работы:
        1. Проверка, аутентифицирован ли пользователь и подтвержден ли его email:
            - Если пользователь не аутентифицирован или его email уже подтвержден, происходит
              перенаправление на главную страницу.
            - Если пользователь аутентифицирован, но его email еще не подтвержден, отображается страница
              с уведомлением о необходимости подтверждения email.

    Аргументы:
        None

    Возвращает:
        - redirect: Если пользователь аутентифицирован и его email подтвержден,
          перенаправляется на главную страницу.
        - render_template: Если email пользователя еще не подтвержден,
          рендерится страница с уведомлением о подтверждении.

    Исключения:
        Нет явных исключений. Страница отображается только для пользователей, чей email не подтвержден.

    Примечания:
        Эта функция помогает пользователю понять, что для завершения регистрации требуется подтвердить email.
    """
    if current_user.is_anonymous or current_user.confirmed:
        return redirect('main.index')
    return render_template('auth/unconfirmed.html')


@auth_bp.route('/logout')
@login_required
def logout():
    """
    Выход пользователя из системы.

    Эта функция выполняет выход пользователя из системы, удаляя его сессию и
    перенаправляя на главную страницу с сообщением о выходе. Функция доступна
    только для аутентифицированных пользователей.

    Структура работы:
        1. Выполнение выхода пользователя из системы:
            - Функция вызывает `logout_user()`, что удаляет пользователя из сессии.
        2. Показ сообщения о выходе:
            - После выхода пользователю показывается флеш-сообщение.
        3. Перенаправление:
            - После выполнения выхода происходит перенаправление на главную страницу.

    Аргументы:
        None

    Возвращает:
        - redirect: После выхода пользователя происходит перенаправление на главную страницу.

    Исключения:
        Нет явных исключений. Функция просто выполняет выход пользователя, если он аутентифицирован.

    Примечания:
        Эта функция доступна только для аутентифицированных пользователей, благодаря
        декоратору `@login_required`.
    """
    logout_user()
    current_app.logger.info('Пользователь покинул систему.')
    flash('Еще увидимся!')
    return redirect(url_for('main.index'))


@auth_bp.route('/confirm')
@login_required
def resend_confirmation():
    """
    Повторная отправка письма для подтверждения аккаунта.

    Эта функция отправляет пользователю новое письмо для подтверждения его email.
    Она вызывается, если пользователь уже зарегистрирован, но по какой-то причине не подтвердил свой email.

    Структура работы:
        1. Генерация нового токена для подтверждения email:
            - Для текущего пользователя генерируется новый токен подтверждения.
        2. Отправка письма с новым токеном:
            - Письмо с инструкциями по подтверждению аккаунта отправляется на почтовый ящик пользователя.
        3. Показ сообщения о том, что письмо отправлено:
            - После успешной отправки письма пользователю показывается сообщение о том, что письмо отправлено.

    Аргументы:
        None

    Возвращает:
        - redirect: После отправки письма происходит перенаправление на главную страницу.

    Исключения:
        Нет явных исключений. В случае ошибки отправки email будет записано сообщение об ошибке, но это
        не блокирует дальнейшее выполнение.

    Примечания:
        Эта функция доступна только для аутентифицированных пользователей, так как они должны быть
        зарегистрированы для повторной отправки письма.
    """
    token = current_user.generate_confirmation_token()
    create_and_send_email_async(current_user.email,
                                'Confirm Your Account',
                                'auth/email/confirm',
                                user=current_user, token=token)
    flash('Новое письмо для подтверждения аккаунта отправлено на почтовый ящик.')
    return redirect(url_for('main.index'))


@auth_bp.before_app_request
def before_request():
    """
    Ограничение доступа для неподтвержденных пользователей.

    Эта функция выполняется перед обработкой каждого запроса в приложении и используется для
    ограничения доступа неподтвержденных пользователей. Она проверяет, аутентифицирован ли пользователь и
    подтвержден ли его email. Если пользователь не подтвердил свой email, его перенаправляют на специальную
    страницу, если он пытается получить доступ к любому ресурсу, кроме зоны авторизации.

    Структура работы:
        1. Проверка аутентификации пользователя:
            - Если пользователь аутентифицирован и его email не подтвержден.
        2. Проверка, пытается ли пользователь получить доступ к страницам за пределами зоны авторизации:
            - Если запрашиваемый endpoint не является частью зоны `auth` и не относится к статическим файлам.
        3. Перенаправление на страницу подтверждения:
            - Если условия выполняются, происходит перенаправление пользователя на страницу с уведомлением о
              необходимости подтверждения email.

    Аргументы:
        None

    Возвращает:
        - redirect: Если пользователь не подтвердил email и пытается получить доступ к другим разделам
          приложения, происходит перенаправление на страницу подтверждения.

    Исключения:
        Нет явных исключений. В случае выполнения условий перенаправления, запрос не будет продолжен.

    Примечания:
        Функция применяется ко всему приложению и ограничивает доступ неподтвержденных пользователей.
        Для неподтвержденных пользователей доступ разрешен только к страницам в зоне `auth/`.

    """
    if current_user.is_authenticated:
        # Обновляем атрибут last_seen
        current_user.ping()
        if (not current_user.confirmed
            # Загрузка статики без проверки
            and request.endpoint != 'static'
                and request.endpoint[:5] != 'auth.'):
            current_app.logger.debug(
                f"Пользователь {current_user.id} не подтвержден. Перенаправляю на специальную страницу.")
            return redirect(url_for('auth.unconfirmed'))
